/* util.hh
 * Analytic expression for photon dispersion
 * Utilities to reconstruct path generated by dynamic_correlator
 *
 * Created on 07/08/2018
 * Copyright (C) 2018 Attila Szab√≥ <as2372@cam.ac.uk>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the Creative Commons Attribution License (CC-BY),
 * version 4.0 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Please find a copy of the Creative Commons CC-BY License on
 * <https://creativecommons.org/licenses/by/4.0/>.
 */

#ifndef util_hh
#define util_hh

#include <vec3.hh>

/* Returns the analytic result for the photon dispersion relation from
 * PRB 95, 134439
 * Input: wave vector in units of 2pi/a_fcc */
double freq_analytic (const vec3& k);

/* Returns the wave vector corresponding to a given distance along the path
 * traversed by dynamic_correlator::path4
 *  0 = Gamma
 *  4 = X
 *  6 = W
 *  7 = K
 * 10 = Gamma
 * 12 = L
 * 13 = U
 * 14 = X
 * Output in units of 2pi/a_fcc */
vec3 path4 (double l);

/* Returns the wave vector corresponding to a given distance along the path
 * traversed by dynamic_correlator::path2
 *  0   = Gamma
 *  2   = X
 *  3   = W
 *  4   = L
 *  5   = Gamma
 *  6.5 = K|U
 *  7   = X'
 * Output in units of 2pi/a_fcc */
vec3 path2 (double l);

/**
 * @brief A coarse approximation to the Coulomb connection integrated along the link connecting the (real) tetrahedron t0 to t1.
 * 
 * @param plaq_loc Origin of the plaquette
 * @param n a normal vector connecting the (-) monopole to the (+) monopole
 * @param t0 tetrahedron 0 location
 * @param t1 tetrahedron 1 location
 * @return double 
 */
double Dirac_dipole(const vec3& plaq_loc, const vec3& normal_vector, const vec3& t0, const vec3& t1);

/**
 * @brief Returns the shortest distance between x and y on a 3-torus of dimensions L[0], L[1], L[2]
 * 
 * @param x point 1
 * @param y point 2
 * @param L Torus size
 * @return distance 
 */
double t3_metric(const vec3_int& x, const vec3_int& y, const vec3_int& L);

/**
 * @brief Returns the shortest distance squared between x and y on a 3-torus of dimensions L[0], L[1], L[2]. 
 * This is an integer-valued operation.
 * 
 * @param x point 1
 * @param y point 2
 * @param L Torus size
 * @return distance 
 */
int t3_metric2(const vec3_int& x, const vec3_int& y, const vec3_int& L);

#endif
